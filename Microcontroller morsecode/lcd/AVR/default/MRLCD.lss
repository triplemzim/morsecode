
MRLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000001b6  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000981  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000cb  00000000  00000000  000009a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000420  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ce  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002dd  00000000  00000000  0000105a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001338  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b0  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000100  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  7a:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Peek_A_Boo>:
	DataDir_MrLCDsCrib = 0xFF;
}

void Peek_A_Boo()
{
	MrLCDsControl |=  1<<LightSwitch;
  82:	de 9a       	sbi	0x1b, 6	; 27
	asm volatile ("nop");
  84:	00 00       	nop
	asm volatile ("nop");
  86:	00 00       	nop
	MrLCDsControl &= ~ ( 1<<LightSwitch );
  88:	de 98       	cbi	0x1b, 6	; 27
}
  8a:	08 95       	ret

0000008c <Check_If_MrLCD_Is_Busy>:
}


void Check_If_MrLCD_Is_Busy()
{
	DataDir_MrLCDsCrib = 0x00;
  8c:	17 ba       	out	0x17, r1	; 23
	MrLCDsControl |=  1<<ReadWrite;
  8e:	df 9a       	sbi	0x1b, 7	; 27
	MrLCDsControl &= ~ ( 1<<BipolarMood );
  90:	dd 98       	cbi	0x1b, 5	; 27

	while(MrLCDsCrib >= 0x80)
  92:	02 c0       	rjmp	.+4      	; 0x98 <Check_If_MrLCD_Is_Busy+0xc>
	{
		Peek_A_Boo();
  94:	0e 94 41 00 	call	0x82	; 0x82 <Peek_A_Boo>
{
	DataDir_MrLCDsCrib = 0x00;
	MrLCDsControl |=  1<<ReadWrite;
	MrLCDsControl &= ~ ( 1<<BipolarMood );

	while(MrLCDsCrib >= 0x80)
  98:	c7 99       	sbic	0x18, 7	; 24
  9a:	fc cf       	rjmp	.-8      	; 0x94 <Check_If_MrLCD_Is_Busy+0x8>
	{
		Peek_A_Boo();
	}

	DataDir_MrLCDsCrib = 0xFF;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	87 bb       	out	0x17, r24	; 23
}
  a0:	08 95       	ret

000000a2 <Send_A_Command>:
	asm volatile ("nop");
	MrLCDsControl &= ~ ( 1<<LightSwitch );
}

void Send_A_Command(unsigned char command)
{	
  a2:	df 93       	push	r29
  a4:	cf 93       	push	r28
  a6:	0f 92       	push	r0
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
	Check_If_MrLCD_Is_Busy();
  ac:	89 83       	std	Y+1, r24	; 0x01
  ae:	0e 94 46 00 	call	0x8c	; 0x8c <Check_If_MrLCD_Is_Busy>
	MrLCDsCrib = command;
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	88 bb       	out	0x18, r24	; 24
	MrLCDsControl &= ~ ( 1<<ReadWrite | 1<<BipolarMood);
  b6:	8b b3       	in	r24, 0x1b	; 27
  b8:	8f 75       	andi	r24, 0x5F	; 95
  ba:	8b bb       	out	0x1b, r24	; 27
	Peek_A_Boo();
  bc:	0e 94 41 00 	call	0x82	; 0x82 <Peek_A_Boo>
	MrLCDsCrib = 0;
  c0:	18 ba       	out	0x18, r1	; 24
}
  c2:	0f 90       	pop	r0
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	08 95       	ret

000000ca <Send_A_Character>:

void Send_A_Character(unsigned char character)
{
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	0f 92       	push	r0
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
	Check_If_MrLCD_Is_Busy();
  d4:	89 83       	std	Y+1, r24	; 0x01
  d6:	0e 94 46 00 	call	0x8c	; 0x8c <Check_If_MrLCD_Is_Busy>
	MrLCDsCrib = character;
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	88 bb       	out	0x18, r24	; 24
	MrLCDsControl &= ~ ( 1<<ReadWrite );
  de:	df 98       	cbi	0x1b, 7	; 27
	MrLCDsControl |= 1<<BipolarMood;
  e0:	dd 9a       	sbi	0x1b, 5	; 27
	Peek_A_Boo();
  e2:	0e 94 41 00 	call	0x82	; 0x82 <Peek_A_Boo>
	MrLCDsCrib = 0;
  e6:	18 ba       	out	0x18, r1	; 24
}
  e8:	0f 90       	pop	r0
  ea:	cf 91       	pop	r28
  ec:	df 91       	pop	r29
  ee:	08 95       	ret

000000f0 <GotoMrLCDsLocation>:

void GotoMrLCDsLocation(uint8_t x, uint8_t y)
{
    Send_A_Command(0x80 + firstColumnPositionsForMrLCD[y-1] + (x-1));
  f0:	81 58       	subi	r24, 0x81	; 129
  f2:	e6 2f       	mov	r30, r22
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	e1 5a       	subi	r30, 0xA1	; 161
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	90 81       	ld	r25, Z
  fc:	89 0f       	add	r24, r25
  fe:	0e 94 51 00 	call	0xa2	; 0xa2 <Send_A_Command>
}
 102:	08 95       	ret

00000104 <InitializeMrLCD>:

void InitializeMrLCD()
{
	DataDir_MrLCDsControl |= 1<<LightSwitch | 1<<ReadWrite | 1<<BipolarMood;
 104:	8a b3       	in	r24, 0x1a	; 26
 106:	80 6e       	ori	r24, 0xE0	; 224
 108:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8b e4       	ldi	r24, 0x4B	; 75
 10c:	9d e1       	ldi	r25, 0x1D	; 29
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <InitializeMrLCD+0xa>
 112:	00 c0       	rjmp	.+0      	; 0x114 <InitializeMrLCD+0x10>
 114:	00 00       	nop
	_delay_ms(30);

	Send_A_Command(0x01); //Clear Screen 0x01 = 00000001
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 51 00 	call	0xa2	; 0xa2 <Send_A_Command>
 11c:	87 ee       	ldi	r24, 0xE7	; 231
 11e:	93 e0       	ldi	r25, 0x03	; 3
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <InitializeMrLCD+0x1c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <InitializeMrLCD+0x22>
 126:	00 00       	nop
	_delay_ms(4);
	Send_A_Command(0x38);
 128:	88 e3       	ldi	r24, 0x38	; 56
 12a:	0e 94 51 00 	call	0xa2	; 0xa2 <Send_A_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	91 e2       	ldi	r25, 0x21	; 33
 130:	9a 95       	dec	r25
 132:	f1 f7       	brne	.-4      	; 0x130 <InitializeMrLCD+0x2c>
 134:	00 00       	nop
	_delay_us(100);
	Send_A_Command(0b00001110);
 136:	8e e0       	ldi	r24, 0x0E	; 14
 138:	0e 94 51 00 	call	0xa2	; 0xa2 <Send_A_Command>
 13c:	81 e2       	ldi	r24, 0x21	; 33
 13e:	8a 95       	dec	r24
 140:	f1 f7       	brne	.-4      	; 0x13e <InitializeMrLCD+0x3a>
 142:	00 00       	nop
	_delay_us(100);
}
 144:	08 95       	ret

00000146 <main>:
void InitializeMrLCD();
void Send_A_String(char *StringOfCharacters);

int main(void)

{	
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
	InitializeMrLCD();
 14e:	0e 94 82 00 	call	0x104	; 0x104 <InitializeMrLCD>
 152:	16 c0       	rjmp	.+44     	; 0x180 <main+0x3a>
       for(int y = 1; y<=2; y++)
        {
            for(int x = 1; x<=16; x++)
            {

                GotoMrLCDsLocation(x, y);
 154:	80 2f       	mov	r24, r16
 156:	6c 2f       	mov	r22, r28
 158:	0e 94 78 00 	call	0xf0	; 0xf0 <GotoMrLCDsLocation>
				Send_A_Character('A');
 15c:	81 e4       	ldi	r24, 0x41	; 65
 15e:	0e 94 65 00 	call	0xca	; 0xca <Send_A_Character>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	83 ed       	ldi	r24, 0xD3	; 211
 164:	90 e3       	ldi	r25, 0x30	; 48
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0x20>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x26>
 16c:	00 00       	nop

	while(1)
	{
       for(int y = 1; y<=2; y++)
        {
            for(int x = 1; x<=16; x++)
 16e:	0f 5f       	subi	r16, 0xFF	; 255
 170:	1f 4f       	sbci	r17, 0xFF	; 255
 172:	01 31       	cpi	r16, 0x11	; 17
 174:	11 05       	cpc	r17, r1
 176:	71 f7       	brne	.-36     	; 0x154 <main+0xe>
{	
	InitializeMrLCD();

	while(1)
	{
       for(int y = 1; y<=2; y++)
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	c3 30       	cpi	r28, 0x03	; 3
 17c:	d1 05       	cpc	r29, r1
 17e:	14 f0       	brlt	.+4      	; 0x184 <main+0x3e>
 180:	c1 e0       	ldi	r28, 0x01	; 1
 182:	d0 e0       	ldi	r29, 0x00	; 0
void InitializeMrLCD();
void Send_A_String(char *StringOfCharacters);

int main(void)

{	
 184:	01 e0       	ldi	r16, 0x01	; 1
 186:	10 e0       	ldi	r17, 0x00	; 0
 188:	e5 cf       	rjmp	.-54     	; 0x154 <main+0xe>

0000018a <Send_A_String>:
	Send_A_Command(0b00001110);
	_delay_us(100);
}

void Send_A_String(char *StringOfCharacters)
{
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	e8 2e       	mov	r14, r24
 194:	e7 01       	movw	r28, r14
 196:	7e 01       	movw	r14, r28
 198:	f9 2e       	mov	r15, r25
 19a:	e7 01       	movw	r28, r14
    while(*StringOfCharacters > 0)
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <Send_A_String+0x18>
    {
        Send_A_Character(*StringOfCharacters++);
 19e:	0e 94 65 00 	call	0xca	; 0xca <Send_A_Character>
	_delay_us(100);
}

void Send_A_String(char *StringOfCharacters)
{
    while(*StringOfCharacters > 0)
 1a2:	89 91       	ld	r24, Y+
 1a4:	88 23       	and	r24, r24
 1a6:	d9 f7       	brne	.-10     	; 0x19e <Send_A_String+0x14>
    {
        Send_A_Character(*StringOfCharacters++);
    }
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	08 95       	ret

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
